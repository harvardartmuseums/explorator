<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.12.0/dist/cdn.min.js"></script>
<script src="https://d3js.org/d3.v5.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/d3-array@3"></script>
<script src="https://cdn.jsdelivr.net/npm/d3-color@3"></script>
<script src="https://cdn.jsdelivr.net/npm/d3-format@3"></script>
<script src="https://cdn.jsdelivr.net/npm/d3-interpolate@3"></script>
<script src="https://cdn.jsdelivr.net/npm/d3-time@3"></script>
<script src="https://cdn.jsdelivr.net/npm/d3-time-format@4"></script>
<script src="https://cdn.jsdelivr.net/npm/d3-scale@4"></script>

<header class="jumbotron grey lighten-4">
    <h1>Building Explorer</h1>
    <p class="lead">Stay awhile. Stay forever.</p>
</header>

<section x-data="dataviz" class="m-2">            
    <div x-show="isLoading" x-text="statusMessage" class="h2"></div>
	<div x-show="!isLoading">
		<label>Show me a </label>
		<select x-model="layoutType" x-on:change="layout">
			<option value="floor plan">floor plan</option>
			<option value="pack">pack graph</option>
			<option value="tree">tree</option>
		</select>
		view of 
		<label>art classified as </label>
		<select x-model="filterSelection.classification" x-on:change="filter">
			<option value="">anything</option>
			<template x-for="classification in filters.classifications" >
        		<option x-value="classification.id" x-text="classification.name"></option>
    		</template>
		</select>
		<label>installed during the past</label>
		<select x-model="filterSelection.age" x-on:change="filter">
			<option value="9999999">anytime</option>
			<option value="5">5 days</option>
			<option value="30">30 days</option>
			<option value="60">60 days</option>
			<option value="90">90 days</option>
			<option value="180">6 months</option>
			<option value="365">1 year</option>
			<option value="730">2 years</option>
		</select>
	</div>
	<div class="d-flex">
    	<div x-show="!isLoading" id="museum"></div>
		<div x-show="!isLoading" id="info" class="p-2" style="max-width:250px"></div>
	</div>
	<div x-show="!isLoading" id="popup" class="position-absolute bg-warning p-2" style="visibility: hidden;"></div>
</section>

<footer class="page-footer grey darken-1 font-small p-3">
    <div class="container-responsive text-left">This page shows a near realtime view of the <span id="numofobjectsonview"></span> objects currently on view in the Harvard Art Museums.</div>
</footer>

<script>
	let popup = d3.select("#popup");

    document.addEventListener('alpine:init', () => {
        Alpine.data('dataviz', () => ({    
            museum: {
				"name": "Harvard Art Museums", 
				"children": [
					{"name": "Lower Level", "floor": 0},
					{"name": "Level 1", "floor": 1},
					{"name": "Level 2", "floor": 2},
					{"name": "Level 3", "floor": 3},
					{"name": "Level 4", "floor": 4},
					{"name": "Level 5", "floor": 5}
				]},
			filters: {"classifications": []},
			filterSelection: {"classification": "", "age": 9999999},
            isLoading: false,
            statusMessage: 'Loading...',
            layoutType: '',
			margin: {top: 50, right: 120, bottom: 50, left: 160},
			width: 0,
			height: 0,

            async init() {
				this.width = window.innerWidth - this.margin.right - this.margin.left;
				this.height = window.innerHeight - this.margin.top - this.margin.bottom;

                this.isLoading = true;
                
				await this.buildFilters();

                let baseURL = '/data/galleries?size=100&sort=gallerynumber';

				for (let level of this.museum.children) {
					this.statusMessage = `Building ${level.name}`;
					
					// fetch the list of rooms
					let rooms = await fetch(`${baseURL}&floor=${level.floor}`);
                    rooms = await rooms.json();

					// fetch the list of objects for each room
                	rooms.records.forEach(this.prepareRoom);
                	level.children = rooms.records;

					level.svg = await d3.xml(`/buildings/images/floor-${level.floor}.svg`);
				}

				this.museum.totalrecordsonview = await this.getObjectCount();
				d3.select("#numofobjectsonview").text(this.museum.totalrecordsonview);

                this.isLoading = false;

				this.layout();
            },

			async getObjectCount() {
                let baseURL = '/data/objects';
                let urlParameters = new URLSearchParams({
                                            size: 0,
                                            gallery: 'any',  
                                        });				

                let art = await fetch(`${baseURL}?${urlParameters.toString()}`);
                    art = await art.json();
                return art.info.totalrecords;	
			},

			async buildFilters() {
				let baseURL = '/data/objects';
				let aggs = {
					"by_classification": {
						"terms": {
							"field": "classification.exact",
							"size": 200, 
							"order": { "_key": "asc" }
						}
					},
					"by_division": { 
						"terms": { 
							"field": "division"
						}
					},
					"by_gender": {
						"terms": {
							"field": "people.gender"
						}
					}
				};
				let urlParameters = new URLSearchParams({
										size: 0,
										gallery: 'any',
										aggregation: JSON.stringify(aggs)
				});

				let data = await fetch(`${baseURL}?${urlParameters.toString()}`).then(r => r.json());	

				data.aggregations.by_classification.buckets.forEach(d => {
					this.filters.classifications.push({name: d.key, count: d.doc_count});
				});
			},

            async prepareRoom(d) {
                let baseURL = '/data/objects';
                let urlParameters = new URLSearchParams({
                                            size: 100,
                                            gallery: d.gallerynumber,  
                                            sort: 'gallery.gallerynumber', 
                                            fields: 'objectnumber,objectid,title,dated,url,primaryimageurl,classification,classificationid,gallery,rank,totalpageviews'
                                        });				

                let art = await fetch(`${baseURL}?${urlParameters.toString()}`);
                    art = await art.json();
                d.objectcount = art.info.totalrecords;	
                d.children = art.records;

                for (var i = art.records.length - 1; i >= 0; i--) {
                    dt1 = new Date(art.records[i].gallery.begindate);
                    dt2 = new Date();
                    var age = Math.floor((Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) - Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate()) ) /(1000 * 60 * 60 * 24));
                    art.records[i].gallery.age = age;
					art.records[i].name = art.records[i].title;
                }

                if (d.id) {
                    delete d.id;
                }
            },

			filter(e) {
				d3.selectAll("#museum circle.object, #museum text.object")
					.style("opacity", 1.0)
					.filter(this.isNotInSelection.bind(this))
						.style("opacity", 0.1);					
			},

			async layout(e) {
				d3.select("#museum")
					.selectAll("*").remove();
					
				// toggle visibility to prevent flickering
				d3.select("#museum")					
					.style("visibility", "hidden");
				
				if (this.layoutType === "pack") {
					await this.packLayout();
				} else if (this.layoutType === "tree") {
					await this.treeLayout();
				} else {
					await this.floorplanLayout();
				}
				this.filter();

				d3.select("#museum")
					.style("visibility", "visible");
			},

			isNotInSelection(record) {
				let output = false;
				if (record.data.gallery) {
					if ((record.data.gallery.age > this.filterSelection.age)) {
						output = true;
					}
					if (this.filterSelection.classification !== "") {
						if (record.data.classification != this.filterSelection.classification) {
							output = true;
						}
					}
				}

				return output;
			},

			async floorplanLayout() {
				var w = this.width,
				    h = this.height;
				
			    let colors = d3.scaleOrdinal(d3.schemeCategory10);

				var node = $.extend(true, {}, this.museum);

				let f1 = await d3.xml("/buildings/images/floor-1.svg");
				populateFloor(f1, node.children[1]);

				let f2 = await d3.xml("/buildings/images/floor-2.svg");
				populateFloor(f2, node.children[2]);
				
				let f3 = await d3.xml("/buildings/images/floor-3.svg");
				populateFloor(f3, node.children[3]);

				function populateFloor(map, data) {
					var floor = document.getElementById('museum')
									.appendChild(map.documentElement);
			
					var canvas = d3.select(floor)
						.attr("id", "floor-" + data.floor)
						.attr("width", w/3.1)
				    	.attr("height", h/1.5);

					for (const d of data.children) {
					    var room = d3.select('#rooms path[data-room="' + d.gallerynumber + '"]');	
					    if (!room.empty()) {
							var roomDims = room.node().getBBox();

							var pack = d3.pack()
								.size([roomDims.width, roomDims.height]);

							var root =  d3.hierarchy(d)
							            	.sum(d => d.hasOwnProperty("rank") ? d.objectid : 0)
											.sort((a,b) => b.value - a.value);
							
							var nodes = pack(root);
							
							canvas.selectAll("circles")
									.data(nodes.descendants())
								.enter().append("circle")
									.attr("class", "object")
									.attr('cx', function(d) { return d.x + roomDims.x; })
									.attr('cy', function(d) { return d.y + roomDims.y; })
									.attr('r', function(d) { return d.r; })
									.style('fill',  function(d) { return d.data.classification ? colors(d.data.classification) : "#ffffff"; })
									.on("click", updateInfoPanel)
									.on("mouseover", showInfoPopup)
									.on("mouseout", hideInfoPopup);
						}
				    };
				}	
			},

            async packLayout() {
				//See https://github.com/mbostock/d3/wiki/Pack-Layout
				//See http://mbostock.github.io/d3/talk/20111018/#22
				//http://bl.ocks.org/mbostock/4063530
				//http://bl.ocks.org/mbostock/4063269
	    
				var w = this.width,
				    h = this.height,
				    r = this.height,
				    x = d3.scaleLinear().range([0, r]),
				    y = d3.scaleLinear().range([0, r]),
				    node,
				    root;

			    let colors = d3.scaleOrdinal(d3.schemeCategory10);

				var pack = d3.pack()
				    .size([r, r]);

				var vis = d3.select("#museum").append("svg")
				    .attr("width", w)
				    .attr("height", h)
				    .on("click", function() { zoom(root); })
				  .append("g")
				    .attr("transform", "translate(" + (w - r) / 2 + "," + (h - r) / 2 + ")");

				node = root = d3.hierarchy(JSON.parse(JSON.stringify(this.museum)))
                    .sum(d => 10)
                    .sort((a,b) => b.value - a.value);

				var nodes = pack(root);

				vis.selectAll("circle")
				  .data(nodes.descendants())
				.enter().append("circle")
				  .attr("class", function(d) { return d.children ? "gallery" : "object"; })
				  .attr("cx", function(d) { return d.x; })
				  .attr("cy", function(d) { return d.y; })
				  .attr("r", function(d) { return d.r; })
                  .style("stroke", "#999")
				  .style("fill", function(d) {return d.data.classification ? colors(d.data.classification) : "#ffffff"; })
					.on("click", updateInfoPanel)
					.on("mouseover", showInfoPopup)
					.on("mouseout", hideInfoPopup);
				  {{!-- .on("click", function(d) { return zoom(node == d ? root : d); }) --}}
                

				vis.selectAll("text")
				  .data(nodes.descendants())
				.enter().append("text")
				  .attr("class", function(d) { return d.children ? "parent" : "child"; })	
				  .attr("x", function(d) { return d.x; })
				  .attr("y", function(d) { return d.y; })
				  .attr("dy", ".35em")
				  .attr("text-anchor", "middle")
				  .style("opacity", function(d) { return d.r > 20 ? 1 : 0; })
				  .style("display", function(d) { return d.parent === root ? "inline" : "none"})
				  .text(function(d) { return d.data.gallerynumber ? d.data.name + ' (' + d.data.gallerynumber + ')' : d.data.objectnumber ? d.data.classification : d.data.name; })
				  .on("click", function(d) { return zoom(node == d ? root : d); });

				function zoom(d, i) {
				  var focus = d;

				  //Zoom up until the second last depth
				  if (focus.children) {
					  var k = r / d.r / 2;
					  x.domain([d.x - d.r, d.x + d.r]);
					  y.domain([d.y - d.r, d.y + d.r]);

					  var t = vis.transition()
					      .duration(d3.event.altKey ? 7500 : 750);

					  t.selectAll("circle")
					      .attr("cx", function(d) { return x(d.x); })
					      .attr("cy", function(d) { return y(d.y); })
					      .attr("r", function(d) { return k * d.r; });

					  t.selectAll("circle.child")
					  	  .attr("class", function(d) { return (d.parent ===focus && focus.depth == 2) ? "child on" : "child"; });

					  t.selectAll("text")
					      .attr("x", function(d) { return x(d.x); })
					      .attr("y", function(d) { return y(d.y); })
					      .style("display", function(d) { return d.parent === focus ? "inline" : "none"})
					      .style("opacity", function(d) { return k * d.r > 20 ? 1 : 0; });
				  }

				  //Keep track of the selected node
				  node = d;
				  d3.event.stopPropagation();
				}			
			},

			async treeLayout() {
				const width = this.width;

				// Compute the tree height; this approach will allow the height of the
				// SVG to scale according to the breadth (width) of the tree layout.
				const root = d3.hierarchy(this.museum);
				const dx = 10;
				const dy = width / (root.height + 1);

			    const colors = d3.scaleOrdinal(d3.schemeCategory10);

				// Create a tree layout.
				const tree = d3.tree().nodeSize([dx, dy]);

				// Sort the tree and apply the layout.
				root.sort((a, b) => d3.ascending(a.data.name, b.data.name));
				tree(root);

				// Compute the extent of the tree. Note that x and y are swapped here
				// because in the tree layout, x is the breadth, but when displayed, the
				// tree extends right rather than down.
				let x0 = Infinity;
				let x1 = -x0;
				root.each(d => {
					if (d.x > x1) x1 = d.x;
					if (d.x < x0) x0 = d.x;
				});

				// Compute the adjusted height of the tree.
				const height = x1 - x0 + dx * 2;

				const svg = d3.select("#museum").append("svg")
					.attr("width", width)
					.attr("height", height)
					.attr("viewBox", [-dy / 3, x0 - dx, width, height])
					.attr("style", "max-width: 100%; height: auto; font: 10px sans-serif;");

				const link = svg.append("g")
					.attr("fill", "none")
					.attr("stroke", "#555")
					.attr("stroke-opacity", 0.4)
					.attr("stroke-width", 1.5)
					.selectAll()
					.data(root.links())
					.join("path")
						.attr("d", d3.linkHorizontal()
							.x(d => d.y)
							.y(d => d.x));
				
				const node = svg.append("g")
					.attr("stroke-linejoin", "round")
					.attr("stroke-width", 3)
					.selectAll()
					.data(root.descendants())
					.join("g")
					.attr("transform", d => `translate(${d.y},${d.x})`);

				node.append("circle")
					.attr("class", d => d.children ? "gallery" : "object")
					.attr("fill", d => d.data.classification ? colors(d.data.classification) : "#999")
					.attr("r", 2.5)
					.on("click", updateInfoPanel)
					.on("mouseover", showInfoPopup)
					.on("mouseout", hideInfoPopup);

				node.append("text")
					.attr("dy", "0.31em")
					.attr("x", d => d.children ? -6 : 6)
					.attr("text-anchor", d => d.children ? "end" : "start")
					.text(d => d.data.name)
					.attr("stroke", "white")
					.attr("paint-order", "stroke")
					.attr("class", d => d.children ? "gallery" : "object")
					.on("click", updateInfoPanel)
					.on("mouseover", showInfoPopup)
					.on("mouseout", hideInfoPopup);
			}			   
        }));
    });

	function showInfoPopup(data) {
		let object = data.data;
		if (object.title) {
			d3.select(d3.event.target)
				.style('stroke', '#000000')
				.style('stroke-width', '5');
			
			popup
				.style("top", (d3.event.pageY-20)+"px").style("left",(d3.event.pageX+20)+"px")
				.style("visibility", "visible")
				.html(object.title);
			if (object.primaryimageurl) {
				popup.append("img")
					.attr("class", "p-2")
					.attr("src", object.primaryimageurl + "?width=150");
			}
		}
	}

	function hideInfoPopup(data) {			
		let object = data.data;
		if (object.title) {			
			d3.select(d3.event.target)
					.style('stroke', '')
		}
		popup.style("visibility", "hidden");
	}

	function updateInfoPanel(data) {
		let object = data.data;
		var info = d3.select("#info")
					.insert("div", ":first-child")
					.attr("class", "data-block");

		var title = info.append("div");
		var details = info.append("div");
		
		var t = object.title;
		if (object.dated) t += ", " + object.dated;
		
		title.append("a")
			.attr("href", object.url)
			.attr("target", "_blank")
			.html(t);

		details.text(`${object.classification}; On view for ${object.gallery.age} days in room ${object.gallery.gallerynumber}`);
		
		if (object.primaryimageurl) {
			info.append("img")
				.attr("src", object.primaryimageurl + "?width=100");
		}					
	}					
</script>