<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.12.0/dist/cdn.min.js"></script>
<header class="jumbotron grey lighten-4">
	<h1>Have you seen me?</h1>
	<p class="lead">Absence makes the heart grow fonder</p>
</header>
<section class="container-fluid">
	<div x-data="recordlist">
    	<div x-show="isLoading" x-text="statusMessage" class="h2"></div>
		<div x-show="!isLoading" class="mb-2">
			<label>Show me </label>
			<select x-model="criteria.named.classification" @change="filter">
				<option value="any">anything</option>
				<template x-for="facet in facets.by_classification.buckets">
					<option :value="facet.key" :selected="facet.key === criteria.named.classification" x-text="`${facet.key} (${facet.doc_count})`"></option>
				</template>
			</select>
			<label> cared for by </label>
			<select x-model="criteria.q.department" @change="filter">
				<option value="*">any department</option>
				<template x-for="facet in facets.by_department.buckets">
					<option :value='`"${facet.key}"`' :selected='`"${facet.key}"` === criteria.q.department' x-text="`the ${facet.key} (${facet.doc_count})`"></option>
				</template>
			</select>			
			<label> acquired in </label>
			<select x-model="criteria.q.accessionyear" @change="filter">
				<option value="*">any year</option>
				<template x-for="facet in facets.by_accessionyear.buckets">
					<option :value="facet.key_as_string" :selected="facet.key_as_string === criteria.q.accessionyear" x-text="`${facet.key_as_string} (${facet.doc_count})`"></option>
				</template>
			</select>
			<label> by </label>
			<select x-model="criteria.q.accessionmethod" @change="filter">
				<option value="*">any method</option>
				<template x-for="facet in facets.by_accessionmethod.buckets">
					<option :value='`"${facet.key}"`' :selected='`"${facet.key}"` === criteria.q.accessionmethod' x-text="`${facet.key} (${facet.doc_count})`"></option>
				</template>
			</select>		
					
			that's been 
			<label> published </label>
			<select x-model="criteria.q.publicationcount" @change="filter">
				<option value=">-1">or not</option>
				<option value="0">0 times</option>
				<option value=">0">1 or more times</option>
				<option value=">10">more than 10 times</option>
				<option value=">20">more than 20 times</option>
			</select>
			<label>, exhibited </label>
			<select x-model="criteria.q.exhibitioncount" @change="filter">
				<option value=">-1">or not</option>
				<option value="0">0 times</option>
				<option value=">0">1 or more times</option>
				<option value=">10">more than 10 times</option>
				<option value=">20">more than 20 times</option>				
			</select>
			<label>, accessed online </label>
			<select x-model="criteria.q.totalpageviews" @change="filter">
				<option value=">-1">or not</option>
				<option value="0">0 times</option>
				<option value=">0">1 or more times</option>
				<option value=">10">more than 10 times</option>
				<option value=">100">more than 100 times</option>				
				<option value=">1000">more than 1000 times</option>				
				<option value=">10000">more than 10000 times</option>				
			</select>
			<label>, and </label>
			<select x-model="criteria.q.imagecount" @change="filter">
				<option value=">-1">has any number of</option>
				<option value="0">has zero</option>
				<option value=">0">has 1 or more</option>
				<option value=">=5">has 5 or more</option>
				<option value=">=10">has 10 or more</option>
			</select> images. 
			<label>Show me the items as </label>
			<select x-model="visualizer" @change="visualize">
				<option value="0">images</option>
				<option value="1">colors</option>
			</select>.
		</div>
		<div class="h4">Rummaging through <span x-text="stats.currentrecordcount.toLocaleString()"></span> items. <span x-text="(stats.totalrecordcount-stats.currentrecordcount).toLocaleString()"></span> left behind.</div>
		<div>
			<template x-for="record in records">
				<a :href="`${record.url}`"><img :style="`width:150px;height:150px;overflow:hidden;background:${record.primarycolor}`" @mousemove="showPopUp($event,record)" @mouseout="hidePopUp()" :data-src="`${record.primaryimageurl}`" :src="visualizer == 0 ? record.primaryimageurl : '/images/transparent.png'"></a>
			</template>
		</div>
		<div class="d-grid mt-4 mb-4">
  			<button class="btn btn-primary btn-lg w-100 p-4" type="button" @click="nextPage">Show me a bit more</button>
		</div>	
	</div>
	<div id="popup" style="visibility: hidden;" class="p-1 bg-light position-absolute w-25"></div>
</section>
<footer class="page-footer grey darken-1 font-small p-3">
	<div class="container-responsive text-left">Another R&D project from the department of Digital Infrastructure and Emerging Technology. Built with the <a href="https://hvrd.art/api">Harvard Art Museums API</a>.</div>
</footer>

<script>
	document.addEventListener('alpine:init', () => {
		Alpine.data('recordlist', () => ({    
            isLoading: false,
            statusMessage: 'Rummaging...',
			popup: document.getElementById("popup"),
			visualizer: 0,
			page: 1,
			records: [],
			stats: {
				totalrecordcount: 0,
				currentrecordcount: 0
			},
			facets: {},
			criteria: {
				q: {
					accesslevel: 1,
					exhibitioncount: '>-1',
					publicationcount: '>-1',
					totalpageviews: '>-1',
					imagecount: '>-1',
					department: '*'
				},
				named: {
					classification: 'any',
				},
			},
			sort: 'rank',
			sortorder: 'desc',

			async init() {
				this.isLoading = true;
				this.stats.totalrecordcount = await this.getCount();
				this.facets = await this.getFacets();
				this.records = await this.getRecords();
				this.isLoading = false;
			},

			reset() {
				this.page = 1;
				this.records = [];
			},

			visualize() {
				if (this.visualizer == 0) {
					document.getElementsByTagName('img').forEach(i => {
						i.src = i.dataset.src;
					})
				} else {
					document.getElementsByTagName('img').forEach(i => {
						i.src = '/images/transparent.png';
					})
				}
			},

			async filter() {
				this.isLoading = true;
				this.reset();
				this.records = await this.getRecords();
				this.facets = await this.getFacets();
				this.isLoading = false;
			},

			async nextPage() {
				this.page+=1;
				this.records = this.records.concat(await this.getRecords());
			},

			expandCriteria() {
				return Object.entries(this.criteria.q).map(([k, v]) => `${k}:${v}`).join(' AND ');
			},

			async getCount() {
				let urlParameters = new URLSearchParams({				
					q: this.expandCriteria(),
					...this.criteria.named,
					size: 0
				});
				let url = `/data/objects?${urlParameters.toString()}`; 

				let results = await fetch(url).then(response => response.json());
				return results.info.totalrecords;
			},

			async getFacets() {
				let aggs = {
					"by_classification": {
						terms: {
							field: "classification.exact",
							size: 100
						}
					},
					"by_accessionyear": {
						terms: {
							field: "accessionyear",
							size: 150,
							order: { "_key": "asc" }
						}
					},
					"by_accessionmethod": {
						terms: {
							field: "accessionmethod",
							size: 150
						}
					},
					"by_department": {
						terms: {
							field: "department",
							size: 25
						}
					}
				};

                let urlParameters = new URLSearchParams({				
					q: this.expandCriteria(),
					...this.criteria.named,
					size: 0,
					aggregations: JSON.stringify(aggs)
				});
				let url = `/data/objects?${urlParameters.toString()}`; 

				let results = await fetch(url).then(response => response.json());
				return results.aggregations;
			},

			async getRecords() {
                let urlParameters = new URLSearchParams({				
					q: this.expandCriteria(),
					...this.criteria.named,
					fields: 'primaryimageurl,url,title,rank,classification,accessionyear,accessionmethod,colors',
					page: this.page,
					sort: this.sort,
					sortorder: this.sortorder,
					size: 100,
				});
				let url = `/data/objects?${urlParameters.toString()}`; 

				let results = await fetch(url).then(response => response.json());

				for (let r of results.records) {
					if (r.primaryimageurl === undefined) {
						r.primaryimageurl = '/images/Image-Unavailable.jpg';
					} else {
						r.primaryimageurl += ':IMAGE/square/!150,150/0/default.jpg';	
					}
					if (r.colors === undefined) {
						r.primarycolor = '#000000';
					} else {
						r.primarycolor = r.colors[0].color;
					}
				}
				
				this.stats.currentrecordcount = results.info.totalrecords;

				return results.records;
			},

			showPopUp(event,record) {
				this.popup.style.top = `${event.pageY}px`;
				this.popup.style.left = `${event.pageX+10}px`;
				this.popup.innerText = `${record.title}
										 ${record.classification}
										 Ranked #${record.rank}
										 ${record.accessionyear == -1 ? 'Accession year unknown' : 'Accessioned in ' + record.accessionyear } via ${record.accessionmethod}`;
										 
				this.popup.style.visibility = 'visible';
			},

			hidePopUp() {
				this.popup.style.visibility = 'hidden';
			}
		}));
	});
</script>